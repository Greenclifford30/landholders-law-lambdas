openapi: 3.1.0
info:
  title: Sinful Delights API
  version: "1.1.0"
  summary: REST API for daily menus, orders, subscriptions, catering, and admin tools.
  description: |
    This OpenAPI document reflects the updated data model from the PRD. 
    Customer endpoints require **X-API-Key** and a Firebase **Bearer** token.
    Admin endpoints require an API key with admin privileges.
servers:
  - url: https://api.sinfuldelights.com/v1
    description: Production
  - url: https://api-dev.sinfuldelights.com/v1
    description: Staging/Dev
security:
  - ApiKeyAuth: []
paths:
  /menu/today:
    get:
      operationId: getTodayMenu
      summary: Fetch today’s active menu
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /menu/{date}:
    get:
      operationId: getMenuByDate
      summary: Fetch menu by date (YYYY-MM-DD)
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
  /menu/{menuId}:
    get:
      operationId: getMenuById
      summary: Fetch a menu by ID
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: string
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /order:
    post:
      operationId: createOrder
      summary: Place a pickup order
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
            examples:
              sample:
                value:
                  items:
                    - itemId: "it_123"
                      quantity: 2
                  pickupSlot: "2025-08-23T17:30:00Z"
                  notes: "No onions please"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/ValidationError"
        "409":
          description: Out of stock
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                outOfStock:
                  value:
                    error:
                      code: OUT_OF_STOCK
                      message: "Item it_123 is out of stock"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /subscription:
    get:
      operationId: getSubscription
      summary: Get the authenticated user’s subscription
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subscription"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      operationId: upsertSubscription
      summary: Create or update the user’s subscription
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpsertSubscriptionRequest"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                  status:
                    type: string
                    enum: [UPDATED, CREATED]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /catering:
    post:
      operationId: submitCateringRequest
      summary: Submit a catering request
      security:
        - ApiKeyAuth: []
          FirebaseAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CateringRequestCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  requestId:
                    type: string
                  status:
                    type: string
                    enum: [NEW]
                  depositInvoiceId:
                    type: string
                    nullable: true
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/analytics:
    get:
      operationId: getAdminAnalytics
      summary: Return dashboard metrics
      security:
        - ApiKeyAuth: []
      parameters:
        - name: from
          in: query
          required: false
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        - name: to
          in: query
          required: false
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminAnalytics"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menu:
    post:
      operationId: upsertMenu
      summary: Create or update a menu (by menuId if provided)
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MenuUpsert"
      responses:
        "200":
          description: Saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  menuId:
                    type: string
                  status:
                    type: string
                    enum: [SAVED]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menus:
    get:
      operationId: listMenus
      summary: List menus (optionally filter by date range and active flag)
      security:
        - ApiKeyAuth: []
      parameters:
        - name: from
          in: query
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        - name: to
          in: query
          schema:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        - name: active
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedMenuList"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menu/{menuId}:
    get:
      operationId: getAdminMenuById
      summary: Return full menu including items
      security:
        - ApiKeyAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    delete:
      operationId: deleteMenu
      summary: Delete a menu
      security:
        - ApiKeyAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [DELETED]
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /admin/inventory:
    post:
      operationId: adjustInventory
      summary: Atomic stock increment/decrement
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryAdjustRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryAdjustResponse"
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menu-template:
    post:
      operationId: createTemplate
      summary: Create a predefined (reusable) menu template
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredefinedMenuCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  templateId:
                    type: string
                  status:
                    type: string
                    enum: [CREATED]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menu-templates:
    get:
      operationId: listTemplates
      summary: List predefined menu templates
      security:
        - ApiKeyAuth: []
      parameters:
        - name: tag
          in: query
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PredefinedMenuListItem"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/menu-template/{templateId}:
    get:
      operationId: getTemplate
      summary: Get a template by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PredefinedMenu"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
    put:
      operationId: updateTemplate
      summary: Update a template (partial update allowed)
      security:
        - ApiKeyAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PredefinedMenuUpdate"
      responses:
        "200":
          description: Updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [UPDATED]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      operationId: deleteTemplate
      summary: Delete a template
      security:
        - ApiKeyAuth: []
      parameters:
        - name: templateId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [DELETED]
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /admin/menu/apply-template:
    post:
      operationId: applyTemplateToDate
      summary: Apply a template’s items to a specific date, merging with existing items
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [templateId, date]
              properties:
                templateId:
                  type: string
                date:
                  type: string
                  pattern: "^\\d{4}-\\d{2}-\\d{2}$"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  menuId:
                    type: string
                  status:
                    type: string
                    enum: [APPLIED]
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /admin/image-upload-url:
    post:
      operationId: getImageUploadUrl
      summary: Issue a pre-signed S3 URL for image uploads
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fileName, contentType]
              properties:
                fileName:
                  type: string
                contentType:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                    format: uri
                  fileUrl:
                    type: string
                    format: uri
        "400":
          $ref: "#/components/responses/ValidationError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    FirebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Missing/invalid authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            unauth:
              value:
                error:
                  code: UNAUTHENTICATED
                  message: "API key or ID token is missing/invalid"
    ValidationError:
      description: Request failed validation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            validation:
              value:
                error:
                  code: VALIDATION_ERROR
                  message: "Invalid field values"
                  details:
                    field: "date"
                    issue: "must match YYYY-MM-DD"
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          examples:
            missing:
              value:
                error:
                  code: NOT_FOUND
                  message: "Menu not found"
  schemas:
    # Core domain
    MenuItem:
      type: object
      required: [itemId, menuId, name, price, stockQty, isSpecial, available]
      properties:
        itemId: { type: string }
        menuId: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        price: { type: number }
        stockQty: { type: integer, minimum: 0 }
        imageUrl: { type: string, format: uri, nullable: true }
        isSpecial: { type: boolean }
        category:
          type: string
          enum: [main, dessert, appetizer, beverage, sides]
          nullable: true
        spiceLevel:
          type: integer
          minimum: 0
          maximum: 5
          nullable: true
        available: { type: boolean }
    Menu:
      type: object
      required: [menuId, date, title, isActive, items]
      properties:
        menuId: { type: string }
        date:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        title: { type: string }
        isActive: { type: boolean }
        imageUrl: { type: string, format: uri, nullable: true }
        lastUpdated: { type: string, format: date-time, nullable: true }
        items:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"
    PredefinedMenu:
      type: object
      required: [templateId, name, items, createdAt]
      properties:
        templateId: { type: string }
        name: { type: string }
        items:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"
        tags:
          type: array
          items: { type: string }
          nullable: true
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
    PredefinedMenuCreate:
      allOf:
        - $ref: "#/components/schemas/PredefinedMenu"
        - type: object
          required: [name, items]
          properties:
            templateId: { readOnly: true }
            createdAt: { readOnly: true }
            updatedAt: { readOnly: true }
    PredefinedMenuUpdate:
      type: object
      properties:
        name: { type: string }
        items:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"
        tags:
          type: array
          items: { type: string }
    PredefinedMenuListItem:
      type: object
      required: [templateId, name, createdAt]
      properties:
        templateId: { type: string }
        name: { type: string }
        createdAt: { type: string, format: date-time }
    Order:
      type: object
      required: [orderId, userId, items, total, status, pickupSlot, placedAt]
      properties:
        orderId: { type: string }
        userId: { type: string }
        items:
          type: array
          items:
            type: object
            required: [itemId, name, price, qty]
            properties:
              itemId: { type: string }
              name: { type: string }
              price: { type: number }
              qty: { type: integer, minimum: 1 }
        total: { type: number }
        status:
          type: string
          enum: [NEW, PAID, READY, PICKED_UP, CANCELLED]
        pickupSlot: { type: string, format: date-time }
        placedAt: { type: string, format: date-time }
        notes: { type: string, nullable: true }
    CreateOrderRequest:
      type: object
      required: [items, pickupSlot]
      properties:
        items:
          type: array
          minItems: 1
          items:
            type: object
            required: [itemId, quantity]
            properties:
              itemId: { type: string }
              quantity:
                type: integer
                minimum: 1
        pickupSlot: { type: string, format: date-time }
        notes: { type: string, nullable: true }
    Subscription:
      type: object
      required: [subscriptionId, userId, plan, nextDelivery, status, skipDates, createdAt]
      properties:
        subscriptionId: { type: string }
        userId: { type: string }
        plan:
          type: object
          required: [planId, mealsPerWeek, portion]
          properties:
            planId: { type: string }
            mealsPerWeek: { type: integer, minimum: 1 }
            portion: { type: string }
            tags:
              type: array
              items: { type: string }
              nullable: true
        nextDelivery:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        status:
          type: string
          enum: [ACTIVE, PAUSED, CANCELLED]
        skipDates:
          type: array
          items:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
    UpsertSubscriptionRequest:
      type: object
      properties:
        plan:
          type: object
          properties:
            planId: { type: string }
            mealsPerWeek: { type: integer, minimum: 1 }
            portion: { type: string }
            tags:
              type: array
              items: { type: string }
        skipDates:
          type: array
          items:
            type: string
            pattern: "^\\d{4}-\\d{2}-\\d{2}$"
    CateringRequest:
      type: object
      required: [requestId, userId, eventDate, guestCount, status, createdAt]
      properties:
        requestId: { type: string }
        userId: { type: string }
        eventDate:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        guestCount: { type: integer, minimum: 1 }
        status:
          type: string
          enum: [NEW, QUOTED, INVOICED, SCHEDULED, COMPLETED, CANCELLED]
        depositInvoiceId: { type: string, nullable: true }
        quoteAmount: { type: number, nullable: true }
        budget: { type: number, nullable: true }
        contact:
          type: object
          nullable: true
          properties:
            name: { type: string }
            email: { type: string }
            phone: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time, nullable: true }
    CateringRequestCreate:
      type: object
      required: [eventDate, guestCount]
      properties:
        eventDate:
          type: string
          pattern: "^\\d{4}-\\d{2}-\\d{2}$"
        guestCount: { type: integer, minimum: 1 }
        cuisinePreferences: { type: string, nullable: true }
        budget: { type: number, nullable: true }
        contact:
          type: object
          required: [name, email, phone]
          properties:
            name: { type: string }
            email: { type: string }
            phone: { type: string }
    InventoryAdjustRequest:
      type: object
      required: [itemId, adjustment]
      properties:
        itemId: { type: string }
        adjustment: { type: integer }
    InventoryAdjustResponse:
      type: object
      required: [itemId, newStockQty]
      properties:
        itemId: { type: string }
        newStockQty: { type: integer }
    PaginatedMenuList:
      type: object
      required: [page, limit, total, data]
      properties:
        page: { type: integer, minimum: 1 }
        limit: { type: integer, minimum: 1 }
        total: { type: integer, minimum: 0 }
        data:
          type: array
          items:
            type: object
            required: [menuId, date, title, isActive]
            properties:
              menuId: { type: string }
              date:
                type: string
                pattern: "^\\d{4}-\\d{2}-\\d{2}$"
              title: { type: string }
              isActive: { type: boolean }
    Error:
      type: object
      required: [error]
      properties:
        error:
          type: object
          required: [code, message]
          properties:
            code: { type: string }
            message: { type: string }
            details:
              type: object
              additionalProperties: true
